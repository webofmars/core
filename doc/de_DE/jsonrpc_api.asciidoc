= API JSON RPC

Voici une documentation (qui évoluera) sur les méthodes de l'API. Tout d'abord voici les spécifications (JSON RPC 2.0) : http://www.jsonrpc.org/specification

L'accès à l'API se fait par l'url : #URL_JEEDOM#/core/api/jeeApi.php

== Divers

=== ping

Retourne pong, permet de tester la communication avec Jeedom

=== version

Retourne la version de Jeedom

=== datetime

Retourne le datetime de jeedom en microseconde

== API JSON Event

=== event::changes 

Retourne la liste des changements depuis le datetime passée en paramètre (doit être en microseconde). Vous aurez aussi dans la réponse le datetime courant de Jeedom (à réutiliser pour l'interrogation suivante)

Paramètres :

- int datetime

== API JSON Plugin

=== plugin::listPlugin
Retourne la liste de tous les plugins

Paramètres :

- int activateOnly = 0 (ne retourne que la liste des plugins activés)
- int orderByCaterogy = 0 (retourne la liste des plugins triés par catégorie)


== API JSON Objet

=== object::all
Retourne la liste de tous les objets

=== object::full
Liefert eine Liste aller Objekte, mit allen Geräten für jedes Objekt und alle Befehle von jedem Gerät, sowie die Zustände von diesem (für Befehle des Info Typs)

=== object::byId
Retourne l'objet spécifié

Paramètres:

- int id

=== object::fullById
Gibt ein Objekt zurück, seine Geräte und für jedes Gerät alle seine Befehle und die Zustände

== API JSON EqLogic
=== eqLogic::all
Retourne la liste de tous les équipements

=== eqLogic::fullById
Gibt ein Gerät sowie dessen Befehle und die Zustände zurück (für Befehle des Info Typs)

=== eqLogic::byId
Retourne l'équipement spécifié

Paramètres:

- int id

=== eqLogic::byType

Retourne tous les équipements appartenant au type (plugin) spécifié

Paramètres:

- string type

=== eqLogic::byObjectId
Retourne tous les équipements appartenant à l'objet spécifié

Paramètres:
- int object_id

=== eqLogic::byTypeAndId
Renvoi un tableau d'équipement en fonction des paramètres. Le retour sera de la forme array('eqType1' =>array( 'id'=>...,'cmds' => array(....)),'eqType2' =>array( 'id'=>...,'cmds' => array(....))....,id1 => array( 'id'=>...,'cmds' => array(....)),id2 => array( 'id'=>...,'cmds' => array(....))..)

Paramètres:

- string[] eqType = tableau des types d'équipements voulus
- int[] id = tableau des ID d'équipements personnalisés voulus

=== eqLogic::save
Retourne l'équipement enregistré/créé

Paramètres:

- int id (vide si c'est une création)
- string eqType_name (type de l'équipement script, virtuel...)
- string $name
- string $logicalId = <nowiki>''</nowiki>
- int $object_id = null
- int $eqReal_id = null;
- int $isVisible = 0;
- int $isEnable = 0;
- array $configuration;
- array $specificCapatibilities;
- int $timeout;
- array $category;

== API JSON Cmd

=== cmd::all
Retourne la liste de toutes les commandes

=== cmd::byId
Retourne la commande spécifiée

Paramètres:

- int id

=== cmd::byEqLogicId
Gibt alle zum angegebenen Gerät gehörenden Befehle zurück

Paramètres:

- int eqLogic_id

=== cmd::execCmd
Führt den angegebenen Befehl aus

Paramètres:

- int id
- [options] Liste des options de la commande (dépend du type et du sous-type de la commande)

=== cmd::getStatistique
Gibt Statistiken über den Befehl zurück (funktioniert nur Befehle vom Info Typ und historisiert)

Paramètres:

- int id
- string startTime : Der Anfangszeitpunkt für die Berechnung der Statistik
- string endTime : Der Endzeitpunkt für die Berechnung der Statistik

=== cmd::getTendance
Retourne la tendance sur la commande (ne marche que sur les commandes de type info et historisées)

Paramètres:

- int id
- string startTime : Der Anfangszeitpunkt für die Berechnung der Tendenz
- string endTime : Der Endzeitpunkt für die Berechnung der Tendenz

=== cmd::getHistory
Retourne l'historique de la commande (ne marche que sur les commandes de type info et historisées)

Paramètres:

- int id
- string startTime : Der Anfangszeitpunkt für die Berechnung der Chronik
- string endTime : Der Endzeitpunkt der Chronik


== API JSON Scenario

=== scenario::all
Retourne la liste de tous les scénarios

=== scenario::byId
Retourne le scénario spécifié

Paramètres:

- int id

=== scenario::changeState
Change l'état du scénario spécifié.

Paramètres:

- int id
- string state : [run,stop,enable,disable]

== API JSON datastore (variable)

=== datastore::byTypeLinkIdKey
Récupère la valeur d'une variable stockée dans le datastore

Paramètres:

- string type : type de la valeur stockée (pour les scénarios c'est scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par defaut, ou l'id du scénario)
- string key : nom de la valeur

=== datastore::save
Enregistre la valeur d'une variable dans le datastore

Paramètres:

- string type : type de la valeur stockée (pour les scénarios c'est scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par defaut, ou l'id du scénario)
- string key : nom de la valeur
- mixte value : valeur à enregistrer

== API JSON Message

=== message::all
Gibt eine Liste aller Nachrichten zurück

=== message::removeAll
Alle Nachrichten löschen

== JSON API Interaktion

=== interact::tryToReply
Essaye de faire correspondre une demande avec une interaction, exécute l'action et répond en conséquence

Paramètres:

- query (phrase de la demande)

== JSON API System

=== jeeNetwork::halt
Ermöglicht Jeedom zu stoppen

=== jeeNetwork::reboot
Ermöglicht Jeedom neu zu starten


== JSON API Plugin

=== plugin::install
Installation/Update eines speziellen Plugin

Paramètres:

- string plugin_id : nom du plugin (logischer Namen)

=== plugin::remove
Löschen eines speziellen Plugin

Paramètres:

- string plugin_id : nom du plugin (logischer Namen)

== JSON API Update

=== update::all
Gibt eine Liste aller installierten Komponenten, deren Versionen und die zugehörigen Informationen zurück

=== update::checkUpdate
Ermöglich, auf Updates zu überprüfen

=== update::update
Erlaubt, Jeedom und aller Plugins zu aktualisieren

== JSON API Beispiele
Hier ist ein Beispiel für die Verwendung der API. Für das nachfolgende Beispiel verwende ich https://github.com/jeedom/core/blob/stable/core/class/jsonrpcClient.class.php[diese php Klasse], sie ermöglicht es, die Nutzung der API zu vereinfachen.  

Die Liste der Objekte abrufen :


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('object::all', array())){
    print_r($jsonrpc->getResult());
}else{
    echo $jsonrpc->getError();
}
 
Einen Befehl ausführen (mit der Option von Titel und Nachricht)


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('cmd::execCmd', array('id' => #cmd_id#, 'options' => array('title' => 'Coucou', 'message' => 'Ca marche')))){
    echo 'OK';
}else{
    echo $jsonrpc->getError();
}
 
Die API ist natürlich verwendbar mit anderen Sprache (nur post auf einer Seite) 